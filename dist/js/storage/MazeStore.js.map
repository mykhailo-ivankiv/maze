{"version":3,"sources":["js/storage/MazeStore.js"],"names":[],"mappings":"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","file":"js/storage/MazeStore.js","sourcesContent":["import Reflux from \"reflux\";\nimport Immutable from \"immutable\";\nimport {getFirstUniqueInt, getRandomInt} from \"utils/helper\";\n\n/**\n * Eller's Algorithm\n * RU - http://habrahabr.ru/post/176671/\n * EN - http://www.neocomputer.org/projects/eller.html\n */\n\nvar algorythmState;\nfunction *renderMaze (mazeWidth = 15, mazeLength = 15) {\n  let startSet = Array\n                  .apply(null, {length: mazeWidth})\n                  .map((el, i) => ({ top: true, left: false, bottom: false, right: false, value: i}));\n\n  let result = Immutable.List();\n  algorythmState = {description: \"Create initial set\"};\n\n  for (let rowIndex=0; rowIndex < mazeLength; rowIndex += 1) { //set right border;\n    result = result.push(startSet);\n    algorythmState.activeRowIndex = rowIndex;\n    yield result.toJS();\n\n    let lengthOfSubset = 1;\n\n    for (let cellIndex = 0; cellIndex < startSet.length; cellIndex +=1) {\n      algorythmState.description = \"Set right border\";\n      algorythmState.activeCellIndex = cellIndex;\n\n      yield result.toJS();\n\n      let cell = startSet[cellIndex];\n\n      if (startSet[cellIndex + 1] !== undefined && startSet[cellIndex + 1].value === cell.value) {\n        cell.right = true;\n      } else if (Math.random() < 0.5 && startSet[cellIndex + 1] !== undefined) {\n        startSet[cellIndex + 1].value = cell.value;\n      } else {\n        cell.right = true;\n      }\n\n      cell.left = cellIndex === 0;\n      cell.right = (cellIndex === (mazeWidth - 1)) || cell.right;\n\n      yield result.toJS();\n    }\n\n    for (let k = 0; k < startSet.length; k+=1) { //set bottom border;\n      algorythmState.description = \"Set bottom border\";\n      algorythmState.activeCellIndex = k;\n\n      let el = startSet[k];\n      if (startSet[k + 1] !== undefined && startSet[k + 1].value === el.value) {\n        lengthOfSubset += 1;\n      } else {\n        let doorCount = getRandomInt(1, lengthOfSubset);\n\n        for (let f = k; f > k - lengthOfSubset; f -= 1) {\n          if (doorCount === 0) {\n            startSet[f].bottom = true;\n          } else if (doorCount === f - k + lengthOfSubset) {\n            doorCount -= 1;\n            startSet[f].bottom = false;\n          } else if (Math.random() > 0.5) {\n            startSet[f].bottom = true;\n          } else {\n            doorCount -= 1;\n            startSet[f].bottom = false;\n          }\n        }\n\n        lengthOfSubset = 1;\n      }\n      yield result.toJS();\n    }\n\n    yield result.toJS();\n\n    startSet = Immutable.fromJS(startSet).toJS()\n      .map((el,index, array) => {\n        if (el.bottom) {\n          el.value = getFirstUniqueInt(array.map(el => el.value));\n        }\n        el.top = false;\n        el.bottom = false;\n        el.right = false;\n        return el;\n      })\n  }\n\n  result.get(result.length - 1)\n    .forEach((el, index, array)=>{\n      el.bottom = true;\n\n      if(array[index+1]) {\n        console.log(el.value, array[index+1].value, array.map(el=>el.value));\n      }\n\n      if (array[index+1] && el.value !== array[index+1].value) {\n        el.right = false;\n        array[index+1].value = el.value;\n      }\n\n    });\n\n  return result.toJS();\n}\n\n\nexport var MazeActions = Reflux.createActions([\n  \"goToNextRow\",\n  \"goToPrevRow\"\n]);\n\nvar mazeGenerator = renderMaze();\nvar maze = mazeGenerator.next().value;\n\nexport var MazeStore = Reflux.createStore({\n  pointer : 0,\n  listenables: MazeActions,\n\n  onGoToNextRow() {\n    this.pointer += 1;\n    if (maze.length < this.pointer) {maze = mazeGenerator.next().value;}\n    this.trigger();\n  },\n\n  onGoToPrevRow () {\n    this.pointer -= 1;\n    this.trigger();\n  },\n\n  getMaze () {\n    return maze.slice(0, this.pointer);\n  },\n\n  getAlgorithmState() {\n    return algorythmState;\n  },\n\n  getTotalProgress () {\n    return maze.length;\n  },\n\n  getActiveProgress () {\n    return Math.round(this.pointer/48);\n  }\n});\n"],"sourceRoot":"/source/"}