{"version":3,"sources":["js/components/StepDescription.js"],"names":[],"mappings":";;;;;;;;;;;;;;;AAIA,MAAI,CAAC,GAAG,gBAAI,CAAC,CAAC,iBAAiB,CAAC,CAAC;;MAE3B,eAAe;AACP,aADR,eAAe,CACN,IAAI,EAAE;4BADf,eAAe;;AAEjB,iCAFE,eAAe,6CAET;AACR,UAAI,CAAC,KAAK,GAAG;AACX,sBAAc,EAAE,kBARd,SAAS,CAQe,iBAAiB,EAAE;AAC7C,YAAI,EAAE,kBATJ,SAAS,CASK,OAAO,EAAE;OAC1B,CAAC;KACH;;cAPG,eAAe;;iBAAf,eAAe;;aASN,wBAAG;AACd,YAAI,CAAC,QAAQ,CAAC;AACZ,cAAI,EAAE,kBAfJ,SAAS,CAeK,OAAO,EAAE;AACzB,wBAAc,EAAG,kBAhBf,SAAS,CAgBgB,iBAAiB,EAAE;SAC/C,CAAC,CAAC;OACJ;;;aAEiB,6BAAG;AACnB,YAAI,CAAC,WAAW,GAAG,CACjB,kBAtBE,SAAS,CAsBD,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAC/C,CAAA;OACF;;;aAEoB,gCAAG;AACtB,YAAI,CAAC,WAAW,CAAC,GAAG,CAAC,UAAC,EAAE;iBAAI,EAAE,EAAE;SAAA,CAAC,CAAC;OACnC;;;aAEM,kBAAG;AACR,eACE;;YAAK,SAAS,EAAE,CAAC,EAAE,AAAC;UACjB,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,WAAW;UAEtC;;;YACE;;;;aAAkE;YAElE;;;;aAAoE;YAEpE;;;;cAEE;;;gBACE;;;;kBAEE;;;oBACE;;;;qBAA4I;oBAC5I;;;;qBAAyH;mBACtH;iBACF;eACF;aACF;YAEL;;;;cAEE;;;gBACE;;;;kBAGE;;;oBACE;;;;qBAA6E;oBAC7E;;;;qBAAmG;mBAChG;iBACF;eACF;aACF;YAEL;;;;cAEE;;;gBACE;;;;kBACE;;;oBACE;;;;qBAA+B;oBAC/B;;;;qBAA+B;oBAC/B;;;;qBAAuD;oBACvD;;;;qBAAgC;oBAChC;;;;qBAA6B;mBAC1B;iBACF;eACF;aACF;YAEL;;;;cAEE;;;gBACE;;;;iBAAwC;gBACxC;;;;kBAEE;;;oBACE;;;;sBAEE;;;wBACE;;;;yBAAsF;wBACtF;;;;yBAA8B;wBAC9B;;;;yBAAoF;wBACpF;;;;yBAA6B;uBAC1B;qBACF;mBACF;iBACF;eACF;aACF;WAEF;SACD,CACP;OACF;;;WAtGG,eAAe;KAAS,kBAAM,SAAS;;mBAyG9B,eAAe","file":"js/components/StepDescription.js","sourcesContent":["import React from \"react\";\nimport BEM from \"utils/BEM\";\nimport {MazeStore, MazeActions} from \"storage/MazeStore\";\n\nvar b = BEM.b(\"StepDescription\");\n\nclass StepDescription extends React.Component {\n  constructor (pref) {\n    super();\n    this.state = {\n      algorithmState: MazeStore.getAlgorithmState(),\n      maze: MazeStore.getMaze()\n    };\n  }\n\n  onMazeChange () {\n    this.setState({\n      maze: MazeStore.getMaze(),\n      algorithmState : MazeStore.getAlgorithmState()\n    });\n  }\n\n  componentDidMount () {\n    this.unsubscribe = [\n      MazeStore.listen(this.onMazeChange.bind(this))\n    ]\n  }\n\n  componentWillUnmount () {\n    this.unsubscribe.map((fn)=> fn());\n  }\n  \n  render () {\n    return (\n      <div className={b()}>\n        {this.state.algorithmState.description}\n\n        <ul>\n          <li>Create the first row. No cells will be members of any set</li>\n\n          <li>Join any cells not members of a set to their own unique set</li>\n\n          <li>\n            Create right-walls, moving from left to right:\n            <ul>\n              <li>\n                Randomly decide to add a wall or not\n                <ul>\n                  <li>If the current cell and the cell to the right are members of the same set, always create a wall between them. (This prevents loops)</li>\n                  <li>If you decide not to add a wall, union the sets to which the current cell and the cell to the right are members.</li>\n                </ul>\n              </li>\n            </ul>\n          </li>\n\n          <li>\n            Create bottom-walls, moving from left to right:\n            <ul>\n              <li>\n                Randomly decide to add a wall or not. Make sure that each set has at least one cell without a\n                bottom-wall (This prevents isolations)\n                <ul>\n                  <li>If a cell is the only member of its set, do not create a bottom-wall</li>\n                  <li>If a cell is the only member of its set without a bottom-wall, do not create a bottom-wall</li>\n                </ul>\n              </li>\n            </ul>\n          </li>\n\n          <li>\n            Decide to keep adding rows, or stop and complete the maze\n            <ul>\n              <li>If you decide to add another row:\n                <ul>\n                  <li>Output the current row</li>\n                  <li>Remove all right walls</li>\n                  <li>Remove cells with a bottom-wall from their set</li>\n                  <li>Remove all bottom walls</li>\n                  <li>Continue from Step 2</li>\n                </ul>\n              </li>\n            </ul>\n          </li>\n\n          <li>\n            If you decide to complete the maze\n            <ul>\n              <li>Add a bottom wall to every cell</li>\n              <li>\n                Moving from left to right:\n                <ul>\n                  <li>\n                    If the current cell and the cell to the right are members of a different set:\n                    <ul>\n                      <li>If the current cell and the cell to the right are members of a different set:</li>\n                      <li>Remove the right wall</li>\n                      <li>Union the sets to which the current cell and cell to the right are members.</li>\n                      <li>Output the final row</li>\n                    </ul>\n                  </li>\n                </ul>\n              </li>\n            </ul>\n          </li>\n\n        </ul>\n      </div>\n    )    \n  };\n}\n\nexport default StepDescription;\n"],"sourceRoot":"/source/"}