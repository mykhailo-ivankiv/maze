{"version":3,"sources":["js/components/Maze.js"],"names":[],"mappings":";;;;;;;;;;;;;mBAuDU,GAAG;;;;;;AAlDb,MAAI,CAAC,GAAG,KAAI,CAAC,CAAC,MAAM,CAAC,CAAC;;MAEhB,IAAI;AACI,aADR,IAAI,CACK,IAAI,EAAE;4BADf,IAAI;;AAEN,iCAFE,IAAI,6CAEE;AACR,UAAI,CAAC,KAAK,GAAG;AACX,YAAI,EAAE,kBARJ,SAAS,CAQK,OAAO,EAAE;AACzB,sBAAc,EAAG,kBATf,SAAS,CASgB,iBAAiB,EAAE;OAC/C,CAAC;KACH;;cAPG,IAAI;;iBAAJ,IAAI;;aASK,wBAAG;AACd,YAAI,CAAC,QAAQ,CAAC;AACZ,cAAI,EAAE,kBAfJ,SAAS,CAeK,OAAO,EAAE;AACzB,wBAAc,EAAG,kBAhBf,SAAS,CAgBgB,iBAAiB,EAAE;SAC/C,CAAC,CAAC;OACJ;;;aAEiB,6BAAG;AACnB,YAAI,CAAC,WAAW,GAAG,CACjB,kBAtBE,SAAS,CAsBD,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAC/C,CAAA;OACF;;;aAEoB,gCAAG;AACtB,YAAI,CAAC,WAAW,CAAC,GAAG,CAAC,UAAC,EAAE;iBAAI,EAAE,EAAE;SAAA,CAAC,CAAC;OACnC;;;aAEM,kBAAG;;;YACH,IAAI,GAAI,IAAI,CAAC,KAAK,CAAlB,IAAI;;AACT,eACE;;YAAK,SAAS,EAAE,CAAC,EAAE,AAAC;UACjB,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,WAAW;UAErC,IAAI,CAAC,GAAG,CAAC,UAAC,GAAG,EAAE,QAAQ;mBAAK;;gBAAK,SAAS,EAAE,CAAC,CAAC,KAAK,CAAC,AAAC;cACnD,GAAG,CAAC,GAAG,CAAC,UAAC,IAAI,EAAE,SAAS;uBAAK;;oBAAK,SAAS,EAAI,CAAC,CAAC,MAAM,EAAC;AACvD,4BAAM,EAAE,OAAK,KAAK,CAAC,cAAc,CAAC,cAAc,KAAM,QAAQ,IAAI,OAAK,KAAK,CAAC,cAAc,CAAC,eAAe,KAAK,SAAS;AACzH,yBAAG,EAAE,IAAI,CAAC,GAAG;AACb,0BAAI,EAAE,IAAI,CAAC,IAAI;AACf,4BAAM,EAAE,IAAI,CAAC,MAAM;AACnB,2BAAK,EAAE,IAAI,CAAC,KAAK;qBACjB,CAAC,AAAC;kBAAE,IAAI,CAAC,KAAK;iBAAO;eAAA,CAAC;aACpB;WAAA,CAAC;SACH,CACP;OACF;;;WA3CG,IAAI;KAAS,OAAM,SAAS;;mBA8CnB,IAAI;;AAEnB,WAAU,GAAG;QACP,OAAO;;;;AAAP,iBAAO,GAAG,CAAC;;iBACT,OAAO,EAAE;;;;;;;GAChB","file":"js/components/Maze.js","sourcesContent":["import React from \"react\";\nimport BEM from \"utils/BEM\";\n\nimport {MazeStore, MazeActions} from \"storage/MazeStore\";\n\nvar b = BEM.b(\"maze\");\n\nclass Maze extends React.Component {\n  constructor (pref) {\n    super();\n    this.state = {\n      maze: MazeStore.getMaze(),\n      algorithmState : MazeStore.getAlgorithmState()\n    };\n  }\n\n  onMazeChange () {\n    this.setState({\n      maze: MazeStore.getMaze(),\n      algorithmState : MazeStore.getAlgorithmState()\n    });\n  }\n\n  componentDidMount () {\n    this.unsubscribe = [\n      MazeStore.listen(this.onMazeChange.bind(this))\n    ]\n  }\n\n  componentWillUnmount () {\n    this.unsubscribe.map((fn)=> fn());\n  }\n\n  render () {\n    var {maze} = this.state;\n    return (\n      <div className={b()}>\n        {this.state.algorithmState.description}\n\n        {maze.map((row, rowIndex) => <div className={b(\"row\")}>\n          {row.map((cell, cellIndex) => <div className = {b(\"cell\",{\n            active: this.state.algorithmState.activeRowIndex  === rowIndex && this.state.algorithmState.activeCellIndex === cellIndex,\n            top: cell.top,\n            left: cell.left,\n            bottom: cell.bottom,\n            right: cell.right\n           })}>{cell.value}</div>)}\n        </div>)}\n      </div>\n    )\n  };\n}\n\nexport default Maze;\n\nfunction *foo() {\n  var pointer = 0\n  yield pointer++;\n}"],"sourceRoot":"/source/"}