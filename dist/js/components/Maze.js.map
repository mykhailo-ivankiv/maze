{"version":3,"sources":["js/components/Maze.js"],"names":[],"mappings":";;;;;;;;;;;;;mBA+CU,GAAG;;;;;;AA1Cb,MAAI,CAAC,GAAG,KAAI,CAAC,CAAC,MAAM,CAAC,CAAC;;MAEhB,IAAI;AACI,aADR,IAAI,CACK,IAAI,EAAE;4BADf,IAAI;;AAEN,iCAFE,IAAI,6CAEE;AACR,UAAI,CAAC,KAAK,GAAG,EAAE,IAAI,EAAE,kBAPjB,SAAS,CAOkB,OAAO,EAAE,EAAE,CAAC;KAC5C;;cAJG,IAAI;;iBAAJ,IAAI;;aAMK,wBAAG;AACd,YAAI,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,kBAXlB,SAAS,CAWmB,OAAO,EAAE,EAAE,CAAC,CAAC;OAC9C;;;aAEiB,6BAAG;AACnB,YAAI,CAAC,WAAW,GAAG,CACjB,kBAhBE,SAAS,CAgBD,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAC/C,CAAA;OACF;;;aAEoB,gCAAG;AACtB,YAAI,CAAC,WAAW,CAAC,GAAG,CAAC,UAAC,EAAE;iBAAI,EAAE,EAAE;SAAA,CAAC,CAAC;OACnC;;;aAEM,kBAAG;YACH,IAAI,GAAI,IAAI,CAAC,KAAK,CAAlB,IAAI;;AACT,eACE;;YAAK,SAAS,EAAE,CAAC,EAAE,AAAC;UAEjB,IAAI,CAAC,GAAG,CAAE,UAAA,GAAG;mBAAI;;gBAAK,SAAS,EAAE,CAAC,CAAC,KAAK,CAAC,AAAC;cACxC,GAAG,CAAC,GAAG,CAAC,UAAC,IAAI,EAAE,KAAK;uBAAK;;oBAAK,SAAS,EAAI,CAAC,CAAC,MAAM,EAAC;AACnD,yBAAG,EAAE,IAAI,CAAC,GAAG;AACb,0BAAI,EAAE,IAAI,CAAC,IAAI;AACf,4BAAM,EAAE,IAAI,CAAC,MAAM;AACnB,2BAAK,EAAE,IAAI,CAAC,KAAK;qBACjB,CAAC,AAAC;kBAAE,IAAI,CAAC,KAAK;iBAAO;eAAA,CAAC;aACpB;WAAA,CAAE;SACJ,CACP;OACF;;;WAnCG,IAAI;KAAS,OAAM,SAAS;;mBAsCnB,IAAI;;AAEnB,WAAU,GAAG;QACP,OAAO;;;;AAAP,iBAAO,GAAG,CAAC;;iBACT,OAAO,EAAE;;;;;;;GAChB","file":"js/components/Maze.js","sourcesContent":["import React from \"react\";\nimport BEM from \"utils/BEM\";\n\nimport {MazeStore, MazeActions} from \"storage/MazeStore\";\n\nvar b = BEM.b(\"maze\");\n\nclass Maze extends React.Component {\n  constructor (pref) {\n    super();\n    this.state = { maze: MazeStore.getMaze() };\n  }\n\n  onMazeChange () {\n    this.setState({ maze: MazeStore.getMaze() });\n  }\n\n  componentDidMount () {\n    this.unsubscribe = [\n      MazeStore.listen(this.onMazeChange.bind(this))\n    ]\n  }\n\n  componentWillUnmount () {\n    this.unsubscribe.map((fn)=> fn());\n  }\n\n  render () {\n    var {maze} = this.state;\n    return (\n      <div className={b()}>\n\n        {maze.map((row => <div className={b(\"row\")}>\n          {row.map((cell, index) => <div className = {b(\"cell\",{\n            top: cell.top,\n            left: cell.left,\n            bottom: cell.bottom,\n            right: cell.right\n           })}>{cell.value}</div>)}\n        </div>))}\n      </div>\n    )\n  };\n}\n\nexport default Maze;\n\nfunction *foo() {\n  var pointer = 0\n  yield pointer++;\n}"],"sourceRoot":"/source/"}